<testsuites id="" name="" tests="19" failures="0" skipped="7" errors="0" time="3.961811">
<testsuite name="Slider.test.jsx" timestamp="2025-07-02T14:52:45.856Z" hostname="chromium" tests="9" failures="0" skipped="2" time="7.382" errors="0">
<testcase name="Slider › Keyboard Interaction › Right Arrow: Increase the value of the slider by one step." classname="Slider.test.jsx" time="1.608">
</testcase>
<testcase name="Slider › Keyboard Interaction › Up Arrow: Increase the value of the slider by one step." classname="Slider.test.jsx" time="1.636">
</testcase>
<testcase name="Slider › Keyboard Interaction › Left Arrow: Decrease the value of the slider by one step." classname="Slider.test.jsx" time="0.642">
</testcase>
<testcase name="Slider › Keyboard Interaction › Down Arrow: Decrease the value of the slider by one step." classname="Slider.test.jsx" time="2.103">
</testcase>
<testcase name="Slider › Keyboard Interaction › Home: Set the slider to the first allowed value in its range." classname="Slider.test.jsx" time="1.155">
</testcase>
<testcase name="Slider › Keyboard Interaction › End: Set the slider to the last allowed value in its range." classname="Slider.test.jsx" time="0.168">
</testcase>
<testcase name="Slider › Keyboard Interaction › Page Up (Optional): Increase the slider value by an amount larger than the step change made by Up Arrow." classname="Slider.test.jsx" time="0">
<properties>
<property name="skip" value="">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Slider › Keyboard Interaction › Page Down (Optional): Decrease the slider value by an amount larger than the step change made by Down Arrow." classname="Slider.test.jsx" time="0">
<properties>
<property name="skip" value="">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="Slider › Semantics › has proper accessible structure" classname="Slider.test.jsx" time="0.07">
</testcase>
</testsuite>
<testsuite name="TabList.test.jsx" timestamp="2025-07-02T14:52:45.856Z" hostname="chromium" tests="10" failures="0" skipped="5" time="0.316" errors="0">
<testcase name="TabList › Keyboard Interaction › Tab › When focus moves into the tab list, places focus on the active tab element." classname="TabList.test.jsx" time="0.062">
</testcase>
<testcase name="TabList › Keyboard Interaction › Tab › When the tab list contains the focus, moves focus to the next element in the page tab sequence outside the tablist, which is the tabpanel unless the first element containing meaningful content inside the tabpanel is focusable." classname="TabList.test.jsx" time="0.07">
</testcase>
<testcase name="TabList › Keyboard Interaction › When focus is on a tab element in a horizontal tab list: › Left Arrow: moves focus to the previous tab. If focus is on the first tab, moves focus to the last tab. Optionally, activates the newly focused tab (See note above)." classname="TabList.test.jsx" time="0.058">
</testcase>
<testcase name="TabList › Keyboard Interaction › When focus is on a tab element in a horizontal tab list: › Right Arrow: Moves focus to the next tab. If focus is on the last tab element, moves focus to the first tab. Optionally, activates the newly focused tab (See note above)." classname="TabList.test.jsx" time="0.064">
</testcase>
<testcase name="TabList › Keyboard Interaction › When focus is on a tab in a tablist with either horizontal or vertical orientation: › Space or Enter: Activates the tab if it was not activated automatically on focus." classname="TabList.test.jsx" time="0">
<properties>
<property name="skip" value="">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="TabList › Keyboard Interaction › When focus is on a tab in a tablist with either horizontal or vertical orientation: › Home (Optional): Moves focus to the first tab. Optionally, activates the newly focused tab (See note below)." classname="TabList.test.jsx" time="0">
<properties>
<property name="skip" value="">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="TabList › Keyboard Interaction › When focus is on a tab in a tablist with either horizontal or vertical orientation: › End (Optional): Moves focus to the last tab. Optionally, activates the newly focused tab (See note below)." classname="TabList.test.jsx" time="0">
<properties>
<property name="skip" value="">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="TabList › Keyboard Interaction › When focus is on a tab in a tablist with either horizontal or vertical orientation: › Shift + F10: If the tab has an associated popup menu, opens the menu." classname="TabList.test.jsx" time="0">
<properties>
<property name="skip" value="">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="TabList › Keyboard Interaction › When focus is on a tab in a tablist with either horizontal or vertical orientation: › Delete (Optional): If deletion is allowed, deletes (closes) the current tab element and its associated tab panel, sets focus on the tab following the tab that was closed, and optionally activates the newly focused tab. If there is not a tab that followed the tab that was deleted, e.g., the deleted tab was the right-most tab in a left-to-right horizontal tab list, sets focus on and optionally activates the tab that preceded the deleted tab. If the application allows all tabs to be deleted, and the user deletes the last remaining tab in the tab list, the application moves focus to another element that provides a logical work flow. As an alternative to Delete, or in addition to supporting Delete, the delete function is available in a context menu." classname="TabList.test.jsx" time="0">
<properties>
<property name="skip" value="">
</property>
</properties>
<skipped>
</skipped>
</testcase>
<testcase name="TabList › Semantics › has proper accessible structure" classname="TabList.test.jsx" time="0.062">
</testcase>
</testsuite>
</testsuites>